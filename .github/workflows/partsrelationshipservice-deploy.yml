name: PRS Deploy

on:
  push:
    branches:
      - main
      - feature/CAX-1-MTPDC@75-system-test
    paths:
      - coreservices/partsrelationshipservice/**
      - .github/workflows/partsrelationshipservice-deploy.yml

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy PRS to'
        required: true
        default: 'dev'

jobs:
  configure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      # Default environment to deploy (overridden when deploying manually)
      ENVIRONMENT_TO_DEPLOY: dev
    steps:
      - uses: actions/checkout@v2
      - name: "Configure environment to deploy (manual deployment only)"
        if: ${{ github.event_name == 'workflow_dispatch'}}
        run: |
          echo "ENVIRONMENT_TO_DEPLOY=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
      - id: get-dataspace-partitions
        run: |
          set -euo pipefail # safe mode
          dataspace_partitions=$(jq -c .partitions cd/dataspace-partitions.json)
          echo "::set-output name=dataspace_partitions::$dataspace_partitions"
    outputs:
      dataspace_partitions: ${{ steps.get-dataspace-partitions.outputs.dataspace_partitions }}
      environment: ${{ env.ENVIRONMENT_TO_DEPLOY }}
      image_tag: 1406887097

  deploy:
    needs:
    - configure
    strategy:
      # avoid stopping concurrent jobs (leaving Terraform state potentially corrupted/leased) on job failure
      fail-fast: false
      matrix:
        partition: ${{ fromJson(needs.configure.outputs.dataspace_partitions) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      ENVIRONMENT: ${{ needs.configure.outputs.environment }}
      # Variables prefixed with TF_VAR_ are automatically picked up as Terraform inputs
      TF_VAR_dataspace_partition: ${{ matrix.partition.key }}
      TF_VAR_image_tag: ${{ needs.configure.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Run Terraform, deploying infrastructure to Azure and application to AKS"
        run: |
          set -euo pipefail # safe mode

          # Settings and credential for Terraform azurerm provider
          export ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)
          export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
          export ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)
          export ARM_SUBSCRIPTION_ID=$(az account show --query "id" --output tsv)

          pushd terraform
            terraform init -backend-config=key=mtpdc.$ENVIRONMENT.${{ matrix.partition.key }}.tfstate
            terraform apply --var-file "../cd/environments/$ENVIRONMENT.tfvars" -var dataspace_partition=${{ matrix.partition.key }} -auto-approve
            terraform output -json > ../terraform-outputs.json
            jq 'map(select(.sensitive | not))' ../terraform-outputs.json > ../terraform-outputs-safe.json

        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: terraform-outputs-${{ matrix.partition.key }}
          path: coreservices/partsrelationshipservice/terraform-outputs-safe.json

  system_test:
    needs:
    - deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    steps:
      - uses: actions/checkout@v2

      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
        path: coreservices/partsrelationshipservice

      - name: "find"
        run: |
          find .
          find terraform-outputs* | xargs grep ^

      - name: "Run system tests"
        run: |
          set -euo pipefail # safe mode
          api_url=${{ needs.deploy.outputs.api_url_bmw }}
          mvn --batch-mode --update-snapshots -Dgroups=SystemTests test -DbaseURI=$api_url -Denvironment=$ENVIRONMENT
