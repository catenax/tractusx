#
# Copyright (c) 2021 T-Systems International GmbH (Catena-X Consortium)
#
# See the AUTHORS file(s) distributed with this work for additional
# information regarding authorship.
#
# See the LICENSE file(s) distributed with this work for
# additional information regarding license terms.
#

#####################################################
# Github Workflow for continuous terraform deployment
#####################################################

name: Terraform Deploy

# Should trigger upon pushs to the terraform related folders

on: 
  push:
    paths:
      - 'infrastructure/terraform/**'
      - '.github/workflows/terraform.yml'

# Consists of two jobs, the first determines the environment
# and the second one (doing the real work) only triggers
# if such an environment can be detected (else the workflow is
# green without doing something)

jobs:

  # First job to determine the environment
  environment:
    name: Determine Target Environment
    runs-on: ubuntu-latest
    outputs:
      workspace: ${{ steps.setvars.outputs.workspace }}

    steps:
      - name: Set variables
        id: setvars
        run: |
          if [[ "${{github.repository}}" == eclipse/tractusx ]]; then
             if [[ "${{github.ref}}" == refs/heads/main ]]; then
                echo "Determined PRODUCTION"
                echo "::set-output name=workspace::prod"
             else
                echo "Unsupported Environment on ECLIPSE. Leaving Workspace empty."
             fi
          else 
            if [[ "${{github.repository}}" == catenax/tractusx ]]; then
              if [[ "${{github.ref}}" == refs/heads/main ]]; then
                echo "Determined INTEGRATION"
                echo "::set-output name=workspace::int"
              elif [[ "${{github.ref}}" = refs/heads/feature/CAX-1-semantics || "${{github.ref}}" = refs/heads/feature/CAX-1-semantics@CXMVP-63-semantic-architecture ]]; then
                  echo "Determined SEMANTICS"
                  echo "::set-output name=workspace::dev042"
              else 
                  echo "Unsupported Branch on CATENAX. Leaving Workspace empty."
              fi
            else
                echo "Unsupported Environment/Repository. Leaving Workspace empty."
            fi
          fi

  # Second job to do the real terraform work
  terraform:
    name: Terraform Target Environment
    runs-on: ubuntu-latest
    # rely on the first job
    needs: environment
    # rely on successful detection of the workspace, ignore if empty
    if: ${{needs.environment.outputs.workspace}}
    env:
      WORKSPACE: ${{needs.environment.outputs.workspace}}
      STATE_INITIAL: true
    steps:

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.10

    - name: Checkout
      uses: actions/checkout@v2

    - name: Terraform Init
      working-directory: ./infrastructure/terraform
      run: | 
          terraform init -backend-config="azure_client_id=${{secrets.AZ_AD_CLIENT_ID}}" -backend-config="azure_client_secret=${{secrets.AZ_AD_CLIENT_SECRET}}" -backend-config="azure_subscription_id=${{secrets.AZ_SUBSCRIPTION_ID}}" -backend-config="azure_tenant_id=${{secrets.AZ_AD_TENANT_ID}}" -input=false

    # When called for the first time, this state restore may fail
    # then STATE_INITIAL stays set to true
    - name: Restore Terraform State
      working-directory: ./infrastructure/terraform
      continue-on-error: true
      run: |
        az storage blob download --name ${{needs.environment.outputs.workspace}}.terraform.tfstate --container-name tfstate --account-name catenaxterraformstate --auth-mode login --file .terraform/terraform.tfstate
        export STATE_INITIAL=""

    # Import shared resources into initial state
    # Only called if STATE_INITIAL is set (previous download failed) and we are not in production
    - name: Import Initial Terraform State
      if: |
        ${{env.STATE_INITIAL}} &&
        ${{needs.environment.outputs.workspace}} != "prod"
      working-directory: ./infrastructure/terraform
      run: |
        terraform import -var azure_client_id=${{secrets.AZURE_AD_CLIENT_ID}} -var azure_client_secret=${{secrets.AZURE_AD_CLIENT_SECRET}} -var azure_tenant_id=${{secrets.AZURE_AD_TENANT_ID}} -input=false azurerm_resource_group.shared_services_rg /subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID}}/resourceGroups/shared_services_rg
        terraform import -var azure_client_id=${{secrets.AZURE_AD_CLIENT_ID}} -var azure_client_secret=${{secrets.AZURE_AD_CLIENT_SECRET}} -var azure_tenant_id=${{secrets.AZURE_AD_TENANT_ID}} -input=false azurerm_log_analytics_workspace.shared /subscriptions/${{secrets.AZURE_SUBSCRIPTION_ID}}/resourcegroups/shared-services-rg/providers/microsoft.operationalinsights/workspaces/catenax-dev001-log
        
    - name: Download Kubernetes SSH Keys
      working-directory: ./infrastructure/terraform
      run: |
        az storage blob download --name ${{needs.environment.outputs.workspace}}.ssh.pub --container-name tfstate --account-name catenaxterraformstate --auth-mode login --file ssh.pub

    - name: Terraform Plan
      working-directory: ./infrastructure/terraform
      run: |
        terraform plan --var-file=environments/${{needs.environment.outputs.workspace}}.tfvars -var azure_subscription_id=${{secrets.AZURE_SUBSCRIPTION_ID}} -var azure_client_id=${{secrets.AZURE_AD_CLIENT_ID}} -var azure_client_secret=${{secrets.AZURE_AD_CLIENT_SECRET}} -var azure_tenant_id=${{secrets.AZURE_AD_TENANT_ID}} -var aks_public_ssh_key=./ssh.pub -out .terraform/terraform.plan -input=false

    - name: Store Terraform Plan
      working-directory: ./infrastructure/terraform
      run: |
        az storage blob upload --name ${{needs.environment.outputs.workspace}}terraform${GITHUB_SHA}.plan --container-name tfstate --account-name catenaxterraformstate --auth-mode login --file .terraform/terraform.plan --metadata TYPE=TERRAFORM_PLAN

    - name: Terraform Auto-Apply
      working-directory: ./infrastructure/terraform
      run: |
        terraform apply -auto-approve .terraform/terraform.plan -input=false

    - name: Store Terraform State
      working-directory: ./infrastructure/terraform
      run: |
        az storage blob upload --name ${{needs.environment.outputs.workspace}}.terraform.tfstate --container-name tfstate --account-name catenaxterraformstate --auth-mode login --file .terraform/terraform.tfstate --metadata TYPE=TERRAFORM_STATE
