name: PRS Destroy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy PRS in'
        required: true
        default: 'dev'

concurrency: partsrelationshipservice-infra

jobs:
  configure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      # Default environment (overridden when selected manually)
      ENVIRONMENT: dev
    steps:
      - uses: actions/checkout@v2
      - name: "Configure environment (manual only)"
        if: ${{ github.event_name == 'workflow_dispatch'}}
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
      - id: get-dataspace-partitions
        run: |
          set -euo pipefail # safe mode
          dataspace_partitions=$(jq -c .partitions cd/dataspace-partitions.json)
          echo "::set-output name=dataspace_partitions::$dataspace_partitions"
    outputs:
      dataspace_partitions: ${{ steps.get-dataspace-partitions.outputs.dataspace_partitions }}
      environment: ${{ env.ENVIRONMENT }}

  # Note that jobs are listed in reverse order, to make diffs with the
  # deploy pipeline easy to manage and improve maintainability.
  destroy_common:
    needs:
    - configure
    - destroy_partitions
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice/cd/terraform-common
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Run Terraform, destroying common infrastructure in Azure"
        id: terraform
        run: ../run-terraform.sh
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TERRAFORM_STATE_BLOB: mtpdc.${{ needs.configure.outputs.environment }}.tfstate
          TERRAFORM_VARS: ../environments/${{ needs.configure.outputs.environment }}.sh
          # TF_CLI_ARGS variables are automatically applied to terraform commands
          TF_CLI_ARGS_apply: "-destroy"

  destroy_partitions:
    needs:
    - configure
    strategy:
      # avoid stopping concurrent jobs (leaving Terraform state potentially corrupted/leased) on job failure
      fail-fast: false
      matrix:
        partition: ${{ fromJSON(needs.configure.outputs.dataspace_partitions) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: coreservices/partsrelationshipservice
    env:
      # Variables prefixed with TF_VAR_ are automatically picked up as Terraform inputs
      TF_VAR_dataspace_partition: ${{ matrix.partition.key }}
      TF_VAR_image_tag: _irrelevant_value_
      TF_VAR_application_insights_name: _irrelevant_value_
      # TF_CLI_ARGS variables are automatically applied to terraform commands
      # -refresh=false is needed to avoid having to inject App Insights resource name.
      TF_CLI_ARGS_apply: "-destroy -refresh=false"
    steps:
      - uses: actions/checkout@v2
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: "Run Terraform, destroying infrastructure in Azure and application in AKS"
        run: ../run-terraform.sh
        working-directory: coreservices/partsrelationshipservice/cd/terraform-dataspace-partition
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
          TERRAFORM_STATE_BLOB: mtpdc.${{ needs.configure.outputs.environment }}.${{ matrix.partition.key }}.tfstate
          TERRAFORM_VARS: ../environments/${{ needs.configure.outputs.environment }}.sh

