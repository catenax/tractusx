/*
 * Catena-X Speedboat Test Data Generator
 * Disclaimer: This service serves synthetic, none-productive data for testing purposes only. All BOMs, part trees, VINs, serialNos etc. are synthetic
 *
 * OpenAPI spec version: 0.0.1 Speedboat
 * Contact: christian.kabelin@partner.bmw.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.PartInfo;
import io.swagger.client.model.PartRelationship;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * List of the relationships with their infos
 */@Schema(description = "List of the relationships with their infos")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2021-10-03T20:34:34.146648200+02:00[Europe/Berlin]")
public class PartRelationshipWithInfos {

  
  @JsonProperty("relationships")
  private List<PartRelationship> relationships = null;
  
  
  @JsonProperty("partInfos")
  private List<PartInfo> partInfos = null;
  
  public PartRelationshipWithInfos relationships(List<PartRelationship> relationships) {
    this.relationships = relationships;
    return this;
  }

  public PartRelationshipWithInfos addRelationshipsItem(PartRelationship relationshipsItem) {
    
    if (this.relationships == null) {
      this.relationships = new ArrayList<>();
    }
    
    this.relationships.add(relationshipsItem);
    return this;
  }
  
  /**
  * List of the relationships
  * @return relationships
  **/
  
  
  @Schema(description = "List of the relationships")
  public List<PartRelationship> getRelationships() {
    return relationships;
  }
  public void setRelationships(List<PartRelationship> relationships) {
    this.relationships = relationships;
  }
  
  public PartRelationshipWithInfos partInfos(List<PartInfo> partInfos) {
    this.partInfos = partInfos;
    return this;
  }

  public PartRelationshipWithInfos addPartInfosItem(PartInfo partInfosItem) {
    
    if (this.partInfos == null) {
      this.partInfos = new ArrayList<>();
    }
    
    this.partInfos.add(partInfosItem);
    return this;
  }
  
  /**
  * List of part infos
  * @return partInfos
  **/
  
  
  @Schema(description = "List of part infos")
  public List<PartInfo> getPartInfos() {
    return partInfos;
  }
  public void setPartInfos(List<PartInfo> partInfos) {
    this.partInfos = partInfos;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartRelationshipWithInfos partRelationshipWithInfos = (PartRelationshipWithInfos) o;
    return Objects.equals(this.relationships, partRelationshipWithInfos.relationships) &&
        Objects.equals(this.partInfos, partRelationshipWithInfos.partInfos);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(relationships, partInfos);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartRelationshipWithInfos {\n");
    
    sb.append("    relationships: ").append(toIndentedString(relationships)).append("\n");
    sb.append("    partInfos: ").append(toIndentedString(partInfos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



