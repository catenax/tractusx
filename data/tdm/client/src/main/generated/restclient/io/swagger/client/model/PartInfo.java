/*
 * Catena-X Speedboat Test Data Generator
 * Disclaimer: This service serves synthetic, none-productive data for testing purposes only. All BOMs, part trees, VINs, serialNos etc. are synthetic
 *
 * OpenAPI spec version: 0.0.1 Speedboat
 * Contact: christian.kabelin@partner.bmw.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.Aspect;
import io.swagger.client.model.PartId;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * Information about parts
 */@Schema(description = "Information about parts")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2021-10-03T20:34:34.146648200+02:00[Europe/Berlin]")
public class PartInfo {

  
  @JsonProperty("part")
  private PartId part = null;
  
  
  @JsonProperty("partTypeName")
  private String partTypeName = null;
  
  
  @JsonProperty("aspects")
  private List<Aspect> aspects = null;
  
  public PartInfo part(PartId part) {
    this.part = part;
    return this;
  }

  
  /**
  * Get part
  * @return part
  **/
  
  
  @Schema(description = "")
  public PartId getPart() {
    return part;
  }
  public void setPart(PartId part) {
    this.part = part;
  }
  
  public PartInfo partTypeName(String partTypeName) {
    this.partTypeName = partTypeName;
    return this;
  }

  
  /**
  * Type of material, (sub)component/part or vehicle
  * @return partTypeName
  **/
  
  
  @Schema(example = "gearbox", description = "Type of material, (sub)component/part or vehicle")
  public String getPartTypeName() {
    return partTypeName;
  }
  public void setPartTypeName(String partTypeName) {
    this.partTypeName = partTypeName;
  }
  
  public PartInfo aspects(List<Aspect> aspects) {
    this.aspects = aspects;
    return this;
  }

  public PartInfo addAspectsItem(Aspect aspectsItem) {
    
    if (this.aspects == null) {
      this.aspects = new ArrayList<>();
    }
    
    this.aspects.add(aspectsItem);
    return this;
  }
  
  /**
  * List of aspect locations.
  * @return aspects
  **/
  
  
  @Schema(description = "List of aspect locations.")
  public List<Aspect> getAspects() {
    return aspects;
  }
  public void setAspects(List<Aspect> aspects) {
    this.aspects = aspects;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PartInfo partInfo = (PartInfo) o;
    return Objects.equals(this.part, partInfo.part) &&
        Objects.equals(this.partTypeName, partInfo.partTypeName) &&
        Objects.equals(this.aspects, partInfo.aspects);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(part, partTypeName, aspects);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PartInfo {\n");
    
    sb.append("    part: ").append(toIndentedString(part)).append("\n");
    sb.append("    partTypeName: ").append(toIndentedString(partTypeName)).append("\n");
    sb.append("    aspects: ").append(toIndentedString(aspects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



