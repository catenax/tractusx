/*
 * Catena-X Speedboat Test Data Generator
 * Disclaimer: This service serves synthetic, none-productive data for testing purposes only. All BOMs, part trees, VINs, serialNos etc. are synthetic
 *
 * OpenAPI spec version: 0.0.1 Speedboat
 * Contact: christian.kabelin@partner.bmw.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.client.model.FurtherInformation;
import io.swagger.client.model.GeneralInformation;
import io.swagger.client.model.ProductClassifications;
import io.swagger.client.model.TechnicalProperties;
import io.swagger.v3.oas.annotations.media.Schema;

/**
 * TechnicalData
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.java.JavaClientCodegen", date = "2021-10-03T20:34:34.146648200+02:00[Europe/Berlin]")
public class TechnicalData {

  
  @JsonProperty("generalInformation")
  private GeneralInformation generalInformation = null;
  
  
  @JsonProperty("productClassifications")
  private ProductClassifications productClassifications = null;
  
  
  @JsonProperty("technicalProperties")
  private TechnicalProperties technicalProperties = null;
  
  
  @JsonProperty("furtherInformation")
  private FurtherInformation furtherInformation = null;
  
  public TechnicalData generalInformation(GeneralInformation generalInformation) {
    this.generalInformation = generalInformation;
    return this;
  }

  
  /**
  * Get generalInformation
  * @return generalInformation
  **/
  
  
  @Schema(required = true, description = "")
  public GeneralInformation getGeneralInformation() {
    return generalInformation;
  }
  public void setGeneralInformation(GeneralInformation generalInformation) {
    this.generalInformation = generalInformation;
  }
  
  public TechnicalData productClassifications(ProductClassifications productClassifications) {
    this.productClassifications = productClassifications;
    return this;
  }

  
  /**
  * Get productClassifications
  * @return productClassifications
  **/
  
  
  @Schema(description = "")
  public ProductClassifications getProductClassifications() {
    return productClassifications;
  }
  public void setProductClassifications(ProductClassifications productClassifications) {
    this.productClassifications = productClassifications;
  }
  
  public TechnicalData technicalProperties(TechnicalProperties technicalProperties) {
    this.technicalProperties = technicalProperties;
    return this;
  }

  
  /**
  * Get technicalProperties
  * @return technicalProperties
  **/
  
  
  @Schema(required = true, description = "")
  public TechnicalProperties getTechnicalProperties() {
    return technicalProperties;
  }
  public void setTechnicalProperties(TechnicalProperties technicalProperties) {
    this.technicalProperties = technicalProperties;
  }
  
  public TechnicalData furtherInformation(FurtherInformation furtherInformation) {
    this.furtherInformation = furtherInformation;
    return this;
  }

  
  /**
  * Get furtherInformation
  * @return furtherInformation
  **/
  
  
  @Schema(description = "")
  public FurtherInformation getFurtherInformation() {
    return furtherInformation;
  }
  public void setFurtherInformation(FurtherInformation furtherInformation) {
    this.furtherInformation = furtherInformation;
  }
  
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TechnicalData technicalData = (TechnicalData) o;
    return Objects.equals(this.generalInformation, technicalData.generalInformation) &&
        Objects.equals(this.productClassifications, technicalData.productClassifications) &&
        Objects.equals(this.technicalProperties, technicalData.technicalProperties) &&
        Objects.equals(this.furtherInformation, technicalData.furtherInformation);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(generalInformation, productClassifications, technicalProperties, furtherInformation);
  }
  
  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TechnicalData {\n");
    
    sb.append("    generalInformation: ").append(toIndentedString(generalInformation)).append("\n");
    sb.append("    productClassifications: ").append(toIndentedString(productClassifications)).append("\n");
    sb.append("    technicalProperties: ").append(toIndentedString(technicalProperties)).append("\n");
    sb.append("    furtherInformation: ").append(toIndentedString(furtherInformation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  
}



