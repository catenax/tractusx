/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package net.catenax.portal.api;

import java.util.List;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import io.swagger.annotations.ApiParam;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import net.catenax.portal.model.Agreement;
import net.catenax.portal.model.App;
import net.catenax.portal.model.AppDescription;
import net.catenax.portal.model.AppLicense;
import net.catenax.portal.model.AppVersion;
import net.catenax.portal.model.Company;
import net.catenax.portal.model.CompanyApplication;
import net.catenax.portal.model.Consent;
import net.catenax.portal.model.Country;
import net.catenax.portal.model.Document;
import net.catenax.portal.model.DocumentTemplate;
import net.catenax.portal.model.IdentityProvider;
import net.catenax.portal.model.Invitation;
import net.catenax.portal.model.Language;
import net.catenax.portal.model.Role;
import net.catenax.portal.model.UseCase;
import net.catenax.portal.model.User;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-02-23T08:56:48.025Z[GMT]")
@Validated
public interface CatenaXApi {

    @Operation(summary = "inject testdata", description = "inject testdata", tags={ "Testdata Injection" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/testdata",
        method = RequestMethod.GET)
    ResponseEntity<Void> injectTestdata();
    
    
    @Operation(summary = "auth url for invitation", description = "auth url for invitation", tags={ "Invitation Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/invitation/authurl",
        method = RequestMethod.GET)
    ResponseEntity<String> getAuthUrlForInvitation(
    		@ApiParam(value = "invitation uuid") 
    		@Parameter(
    				in = ParameterIn.QUERY,
    				name = "invitation",
    				allowEmptyValue = false)
    		String invitation
    		);
    
    @Operation(summary = "auth url for user", description = "auth url for user", tags={ "User Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user/authurl",
        method = RequestMethod.GET)
    ResponseEntity<String> getAuthUrlForUser(
    		@ApiParam(value = "user uuid") 
    		@Parameter(
    				in = ParameterIn.QUERY,
    				name = "uuid",
    				allowEmptyValue = false)
    		String uuid
    		);
    
    @Operation(summary = "auth url for company", description = "auth url for compay", tags={ "Company Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/authurl",
        method = RequestMethod.GET)
    ResponseEntity<String> getAuthUrlForCompany(
    		@ApiParam(value = "user uuid") 
    		@Parameter(
    				in = ParameterIn.QUERY,
    				name = "uuid",
    				allowEmptyValue = false)
    		String uuid
    		);



    @Operation(summary = "create Agreement", description = "create Agreement", tags={ "Agreement Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Agreement", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Agreement.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/agreement",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Agreement> createAgreement(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Agreement body);


    @Operation(summary = "create App", description = "create App", tags={ "App Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "App", content = @Content(mediaType = "application/json", schema = @Schema(implementation = App.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<App> createApp(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody App body);


    @Operation(summary = "create AppDescription", description = "create AppDescription", tags={ "AppDescription Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppDescription", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppDescription.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/description",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AppDescription> createAppDescription(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppDescription body);


    @Operation(summary = "create AppLicense", description = "create AppLicense", tags={ "AppLicense Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppLicense", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppLicense.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/license",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AppLicense> createAppLicense(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppLicense body);


    @Operation(summary = "create AppVersion", description = "create AppVersion", tags={ "AppVersion Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppVersion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppVersion.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/version",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<AppVersion> createAppVersion(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppVersion body);


    @Operation(summary = "create Company", description = "create Company", tags={ "Company Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Company", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Company> createCompany(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Company body);


    @Operation(summary = "create CompanyApplication", description = "create CompanyApplication", tags={ "CompanyApplication Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "CompanyApplication", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyApplication.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/application",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CompanyApplication> createCompanyApplication(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CompanyApplication body);


    @Operation(summary = "create Consent", description = "create Consent", tags={ "Consent Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consent", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Consent.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/consent",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Consent> createConsent(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Consent body);


    @Operation(summary = "create Country", description = "create Country", tags={ "Country Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Country", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Country.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/country",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Country> createCountry(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Country body);


    @Operation(summary = "create Document", description = "create Document", tags={ "Document Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Document", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Document> createDocument(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Document body);


    @Operation(summary = "create DocumentTemplate", description = "create DocumentTemplate", tags={ "DocumentTemplate Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "DocumentTemplate", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentTemplate.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document/template",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<DocumentTemplate> createDocumentTemplate(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody DocumentTemplate body);


    @Operation(summary = "create IdentityProvider", description = "create IdentityProvider", tags={ "IdentityProvider Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "IdentityProvider", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IdentityProvider.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/identityprovider",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<IdentityProvider> createIdentityProvider(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody IdentityProvider body);


    @Operation(summary = "create Invitation", description = "create Invitation", tags={ "Invitation Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Invitation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Invitation.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/invitation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Invitation> createInvitation(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Invitation body);


    @Operation(summary = "create Language", description = "create Language", tags={ "Language Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Language", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Language.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/language",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Language> createLanguage(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Language body);


    @Operation(summary = "create Role", description = "create Role", tags={ "Role Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Role", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user/role",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Role> createRole(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Role body);


    @Operation(summary = "create UseCase", description = "create UseCase", tags={ "UseCase Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "UseCase", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UseCase.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/usecase",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<UseCase> createUseCase(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UseCase body);


    @Operation(summary = "create User", description = "create User", tags={ "User Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "CompanyUser", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "delete Agreement", description = "delete Agreement", tags={ "Agreement Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Agreement.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/agreement",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Agreement> deleteAgreement(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete App", description = "delete App", tags={ "App Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = App.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/application",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<App> deleteApp(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete AppDescription", description = "delete AppDescription", tags={ "AppDescription Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppDescription.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/application/description",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<AppDescription> deleteAppDescription(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete AppLicense", description = "delete AppLicense", tags={ "AppLicense Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppLicense.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/application/license",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<AppLicense> deleteAppLicense(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete AppVersion", description = "delete AppVersion", tags={ "AppVersion Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppVersion.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/application/version",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<AppVersion> deleteAppVersion(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Company", description = "delete Company", tags={ "Company Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/company",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Company> deleteCompany(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete CompanyApplication", description = "delete CompanyApplication", tags={ "CompanyApplication Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyApplication.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/company/application",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<CompanyApplication> deleteCompanyApplication(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Consent", description = "delete Consent", tags={ "Consent Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Consent.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/consent",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Consent> deleteConsent(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Country", description = "delete Country", tags={ "Country Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Country.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/country",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Country> deleteCountry(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Document", description = "delete Document", tags={ "Document Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/document",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Document> deleteDocument(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete DocumentTemplate", description = "delete DocumentTemplate", tags={ "DocumentTemplate Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentTemplate.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/document/template",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<DocumentTemplate> deleteDocumentTemplate(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete IdentityProvider", description = "delete IdentityProvider", tags={ "IdentityProvider Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IdentityProvider.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/identityprovider",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<IdentityProvider> deleteIdentityProvider(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Invitation", description = "delete Invitation", tags={ "Invitation Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Invitation.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/company/invitation",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Invitation> deleteInvitation(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Language", description = "delete Language", tags={ "Language Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Language.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/language",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Language> deleteLanguage(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete Role", description = "delete Role", tags={ "Role Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/user/role",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Role> deleteRole(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete UseCase", description = "delete UseCase", tags={ "UseCase Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UseCase.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/usecase",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<UseCase> deleteUseCase(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "delete User", description = "delete User", tags={ "User Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "TBD", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "204", description = "No Content"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/catena-x/portal/model/user",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<User> deleteUser(@NotNull @Parameter(in = ParameterIn.QUERY, description = "ID" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "id", required = true) String id);


    @Operation(summary = "get Agreement", description = "get Agreement", tags={ "Agreement Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Agreement", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Agreement.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/agreement/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Agreement>> getAgreement(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get App", description = "get App", tags={ "App Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "App", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = App.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<App>> getApp(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get AppDescription", description = "get AppDescription", tags={ "AppDescription Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppDescription", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AppDescription.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/description/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AppDescription>> getAppDescription(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get AppLicense", description = "get AppLicense", tags={ "AppLicense Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppLicense", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AppLicense.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/license/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AppLicense>> getAppLicense(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get AppVersion", description = "get AppVersion", tags={ "AppVersion Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppVersion", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AppVersion.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/version/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<AppVersion>> getAppVersion(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Company", description = "get Company", tags={ "Company Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Company", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Company.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Company>> getCompany(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get CompanyApplication", description = "get CompanyApplication", tags={ "CompanyApplication Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "CompanyApplication", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CompanyApplication.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/application/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<CompanyApplication>> getCompanyApplication(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Consent", description = "get Consent", tags={ "Consent Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consent", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Consent.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/consent/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Consent>> getConsent(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Country", description = "get Country", tags={ "Country Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Country", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Country.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/country/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Country>> getCountry(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Document", description = "get Document", tags={ "Document Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Document", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Document.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Document>> getDocument(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get DocumentTemplate", description = "get DocumentTemplate", tags={ "DocumentTemplate Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "DocumentTemplate", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = DocumentTemplate.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document/template/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<DocumentTemplate>> getDocumentTemplate(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get IdentityProvider", description = "get IdentityProvider", tags={ "IdentityProvider Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "IdentityProvider", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IdentityProvider.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/identityprovider/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<IdentityProvider>> getIdentityProvider(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Invitation", description = "get Invitation", tags={ "Invitation Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Invitation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Invitation.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/invitation/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Invitation>> getInvitation(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Language", description = "get Language", tags={ "Language Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Language", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Language.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/language/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Language>> getLanguage(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get Role", description = "get Role", tags={ "Role Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Role", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Role.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user/role/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Role>> getRole(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get UseCase", description = "get UseCase", tags={ "UseCase Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "UseCase", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UseCase.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/usecase/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<UseCase>> getUseCase(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);


    @Operation(summary = "get User", description = "get User", tags={ "User Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUser(
    		@ApiParam(value = "id") 
    		@Parameter(
    				in = ParameterIn.PATH,
    				name = "id",
    				required = false,
    				allowEmptyValue = true)
    		String id
    		);

    @Operation(summary = "update Agreement", description = "update Agreement", tags={ "Agreement Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Agreement", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Agreement.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/agreement",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Agreement> updateAgreement(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Agreement body);


    @Operation(summary = "update App", description = "update App", tags={ "App Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "App", content = @Content(mediaType = "application/json", schema = @Schema(implementation = App.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<App> updateApp(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody App body);


    @Operation(summary = "update AppDescription", description = "update AppDescription", tags={ "AppDescription Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppDescription", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppDescription.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/description",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AppDescription> updateAppDescription(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppDescription body);


    @Operation(summary = "update AppLicense", description = "update AppLicense", tags={ "AppLicense Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppLicense", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppLicense.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/license",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AppLicense> updateAppLicense(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppLicense body);


    @Operation(summary = "update AppVersion", description = "update AppVersion", tags={ "AppVersion Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "AppVersion", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AppVersion.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/application/version",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<AppVersion> updateAppVersion(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AppVersion body);


    @Operation(summary = "update Company", description = "update Company", tags={ "Company Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Company", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Company.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Company> updateCompany(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Company body);


    @Operation(summary = "update CompanyApplication", description = "update CompanyApplication", tags={ "CompanyApplication Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "CompanyApplication", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CompanyApplication.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/application",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<CompanyApplication> updateCompanyApplication(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody CompanyApplication body);


    @Operation(summary = "update Consent", description = "update Consent", tags={ "Consent Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consent", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Consent.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/consent",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Consent> updateConsent(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Consent body);


    @Operation(summary = "update Country", description = "update Country", tags={ "Country Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Country", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Country.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/country",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Country> updateCountry(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Country body);


    @Operation(summary = "update Document", description = "update Document", tags={ "Document Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Document", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Document.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Document> updateDocument(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Document body);


    @Operation(summary = "update DocumentTemplate", description = "update DocumentTemplate", tags={ "DocumentTemplate Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "DocumentTemplate", content = @Content(mediaType = "application/json", schema = @Schema(implementation = DocumentTemplate.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/document/template",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<DocumentTemplate> updateDocumentTemplate(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody DocumentTemplate body);


    @Operation(summary = "update IdentityProvider", description = "update IdentityProvider", tags={ "IdentityProvider Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "IdentityProvider", content = @Content(mediaType = "application/json", schema = @Schema(implementation = IdentityProvider.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/identityprovider",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<IdentityProvider> updateIdentityProvider(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody IdentityProvider body);


    @Operation(summary = "update Invitation", description = "update Invitation", tags={ "Invitation Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Invitation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Invitation.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/company/invitation",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Invitation> updateInvitation(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Invitation body);


    @Operation(summary = "update Language", description = "update Language", tags={ "Language Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Language", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Language.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/language",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Language> updateLanguage(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Language body);


    @Operation(summary = "update Role", description = "update Role", tags={ "Role Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Role", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Role.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user/role",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Role> updateRole(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Role body);


    @Operation(summary = "update UseCase", description = "update UseCase", tags={ "UseCase Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "UseCase", content = @Content(mediaType = "application/json", schema = @Schema(implementation = UseCase.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/usecase",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<UseCase> updateUseCase(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody UseCase body);


    @Operation(summary = "update User", description = "update User", tags={ "User Entity Service" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User", content = @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden"),
        
        @ApiResponse(responseCode = "404", description = "Not Found") })
    @RequestMapping(value = "/catena-x/portal/model/user",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody User body);


}
